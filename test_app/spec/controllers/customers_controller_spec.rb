require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CustomersController, type: :controller do

  describe 'as a Guest' do
    it 'responds successfully' do
      get :index
      expect(response).to be_successful
    end
  
    it 'responds a 200 status' do
      get :index
      expect(response).to have_http_status "200"
    end
  
    it 'responds a 302 response not authorized' do
      customer = create(:customer)
      get :show, params: { id: customer.id}
      expect(response).to have_http_status "302"  
    end

  end
  
  describe 'as Logged Member' do

    before do
      @member = create(:member)
      @customer = create(:customer)
    end

    it 'Route' do
      is_expected.to route(:get, '/customers').to(action: :index)
    end

    it 'Content-Type JSON' do
      customer_params = attributes_for(:customer)
      sign_in @member
      post :create, format: :json, params: { customer: customer_params }
      expect(response.content_type).to eq('application/json')
    end

    it 'Flash notice' do
      customer_params = attributes_for(:customer)
      sign_in @member
      post :create, params: { customer: customer_params }
      expect(flash[:notice]).to match(/successfully created/)
    end

    it 'with invalid attributes' do
      customer_params = attributes_for(:customer, address: nil)
      sign_in @member
      expect {
        post :create, params: { customer: customer_params }
      }.not_to change(Customer, :count)
    end

    it 'with valid attributes' do
      customer_params = attributes_for(:customer)
      sign_in @member
      expect { 
        post :create, params: { customer: customer_params }
      }.to change { Customer.count }.by(1)
    end

    it 'responds a 200 response' do

      sign_in @member
      get :show, params: { id: @customer.id }
      expect(response).to have_http_status(200)

    end

    it 'render a template :show' do
      sign_in @member
      get :show, params: { id: @customer.id }
      expect(response).to render_template(:show)

    end

  end
  
  
end
